        <ui:composition xmlns="http://www.w3.org/1999/xhtml"
                        xmlns:h="http://xmlns.jcp.org/jsf/html"
                        xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                        xmlns:p="http://primefaces.org/ui"
                        xmlns:f="http://xmlns.jcp.org/jsf/core"
                        xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
                        xmlns:util="http://dostojic.com/util/functions"
                        xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
                        template="/WEB-INF/templates/admin.xhtml">
            
            
            <ui:define name="head">
                
                <style>
                    table{
                        margin-left:auto; 
                        margin-right:auto;
                    }
                    
                    table, td, th {
                        border: 1px solid #152B48;
                    }

                    th {
                        background-color: #152B48;
                        color: white;
                    }
                </style>
            </ui:define>
            <ui:define name="title">Karte - #{buyTicket.perf.play.title}</ui:define>
            <ui:define name="stripe1">
                <div>Filter</div>
            </ui:define>
            <ui:define name="content">
                <h:panelGroup layout="block" rendered="#{not empty buyTicket.perf}">
                <h1>Karte - #{buyTicket.perf.play.title}</h1>
                <h3 id="startTest" onclick="startTest()">Start test</h3>
                <ui:remove>
                <h3 id="webSocketStart">Start websocket</h3>
                <h3 id="webSocketStop">Stop websocket</h3>
                <h3 id="makeSeatOk">makeSeatOk</h3>

                <div class="holder">
                    <label class="label">Scena</label>
                    <h:outputText value="#{buyTicket.perf.stage.name}" />
                </div>

                <div class="holder">
                    <label for="play" class="label">Predstava: </label>
                    <h:outputText value="#{buyTicket.perf.play.title}" />
                </div>

                <div class="holder">
                    <p:outputLabel for="restricted" styleClass="label" value="Datum" />
                    <p:calendar id="restricted" value="#{buyTicket.perf.startDate}" disabled="true" requiredMessage="Datum je obavezno polje" mindate="1/9/14" style="width: 200px;"/>
                </div>

                <div class="holder">
                    <p:outputLabel for="time" value="Time:" styleClass="label" />
                    <p:calendar id="time" required="true" requiredMessage="Obavezno izaberite datum" disabled="true" value="#{buyTicket.perf.startTime}" pattern="HH:mm a" timeOnly="true"  />
                </div>

                <div class="holder">
                    <h:outputLabel for="price" value="Cena: " styleClass="label" />
                    <h:outputText id="price" value="#{buyTicket.perf.price}" />
                </div>
                
                </ui:remove>

                <h:form id="ticketsTableForm">
                    <p:growl id="growl" showDetail="false" sticky="false" />  
                        
                        <h:panelGroup id="ticTable" layout="block">
                            <div>
                        <table id="seats-table">
                           <tr>
                               <th></th>
                               <ui:repeat value="#{util:createArray(buyTicket.perf.stage.numberOfColumns)}" var="a" varStatus="stat">
                                   <th>k #{stat.index + 1}.</th>
                               </ui:repeat>

                           </tr>

                            <ui:repeat value="#{buyTicket.tickets}" id="repeatTickets" var="ticket" varStatus="status">

                               <h:outputText  value="&lt;tr&gt;&lt;th&gt;r #{ticket.seat.row}.&lt;/th&gt;" escape="false" rendered="#{status.index % buyTicket.perf.stage.numberOfColumns == 0}"/>
                               
                               <td id="seat_#{ticket.seatId}" data-ticket="true" data-seat-id="#{ticket.seatId}" data-status-code="#{ticket.status}" data-col="#{ticket.seat.column}" data-row="#{ticket.seat.row}"
                                   title="red #{ticket.seat.row}, kol: #{ticket.seat.column}, status: #{ticket.statusText}" 
                                   class="text-center #{ticket.free ? 'ticket-free' : ticket.sold ? 'ticket-sold' : ticket.reserved ? 'ticket-reserved' : 'ticket-in-store'}">
                                   <ui:remove>
                                   <p:commandLink value=" " rendered="#{ticket.free}" pt:data-status="active" oncomplete="actionComplete('#{component.clientId}');" action="#{buyTicket.addToStock(ticket)}" onstart="return sendMessage(#{ticket.seat.id},#{buyTicket.statusCodeInStore},'#{component.clientId}');" update="@form" />
                                   <p:commandLink value="Izabrana" rendered="#{ticket.inStore}" action="#{buyTicket.removeFromStock(ticket)}" onstart="return sendMessage(#{ticket.seat.id},#{buyTicket.statusCodeFree},'#{component.clientId}');"  update=":ticketsTableForm:orderList :ticketsTableForm:growl :ticketsTableForm:ticTable" />
                                   <p:commandLink styleClass="hide" value="Blokiraj" pt:data-ticket-block="#{ticket.seatId}" action="#{buyTicket.makeUnavailable(ticket)}" update="@form" />
                                   <h:outputText value="Prodata" rendered="#{ticket.sold}" />
                                   <h:outputText value="Rezervisana" rendered="#{ticket.reserved}" />
                                   </ui:remove>
                               </td>
                               
                               <h:outputText value="&lt;/tr&gt;" escape="false" rendered="#{(status.index + 1) % buyTicket.perf.stage.numberOfColumns == 0}"/>


                           </ui:repeat>

                       </table>
                            </div>
                        <h:panelGroup id="orderList" layout="block" >
                            <h:panelGroup layout="block" rendered="#{not empty buyTicket.selectedTickets and fn:length(buyTicket.selectedTickets) > 0}">
                                <ul>
                                <ui:repeat value="#{buyTicket.selectedTickets}" var="ticket">
                                    <li>red: #{ticket.seat.row}, kol: #{ticket.seat.column} - <p:commandLink value="izbaci" action="#{buyTicket.removeFromStock(ticket)}" update=":ticketsTableForm:growl :ticketsTableForm:ticTable" /></li>
                                </ui:repeat>
                                </ul>
                            </h:panelGroup>
                            <h:panelGroup layout="block" rendered="#{empty buyTicket.selectedTickets or fn:length(buyTicket.selectedTickets) == 0}">
                                <h3>Izaberite sedi≈°te</h3>
                            </h:panelGroup>
                        </h:panelGroup>
                       </h:panelGroup>
                       
                </h:form>
                </h:panelGroup>
                
                
            </ui:define>
            <ui:define name="js">
                <h:outputScript target="body" >
                    
                </h:outputScript>
                <script type="text/javascript">
                    /* <![CDATA[ */
                    
                    var wSocket,
                        okSeats = {}, 
                        onWaitSeats = {},
                        tableCache;
                    
                    function actionComplete(clid){
                        console.log('ONCOMPLETE!!! ' + clid);
                    }
                    
                    
                    
                    function getRandomSeatId(min, max) {
                        console.log('seat_' + (Math.floor(Math.random() * (max - min + 1)) + min));
                        return 'seat_' + (Math.floor(Math.random() * (max - min + 1)) + min);
                    }

                    function initializeReception(){
                        var host = "ws://njt-loc:8080/dost/tickets/#{buyTicket.perfId}";
                        wSocket = new WebSocket(host);
                        var browserSupport = ("WebSocket" in window) ? true : false;
                        if (browserSupport){
                            wSocket.onopen = function(){
                                console.log(" Web Socket is connected.");
                            };
                            wSocket.onmessage = function(event){
                                var received_msg = event.data;
                                console.log("PRIMLJENA PORUKA: "+ received_msg);
                                var msg = JSON.parse(received_msg);
                                if (msg.addedStatus == '#{buyTicket.msgStInserted}'){
                                    console.log('uzeti u obzir i status!!!' + msg.status);
                                    makeSeatOk(msg.seatId);
                                }
                                if (msg.addedStatus == '#{buyTicket.msgStAllreadyThere}'){
                                    makeSeatReserved(msg.seatId);
                                    console.log('NIJE USPELO DODAVANJE!');
                                }
                                if (msg.addedStatus == '#{buyTicket.msgStNew}'){
                                    makeSeatReserved(msg.seatId);
                                    
                                    console.log('NEKO DRUGI JE DODAO!');
                                }
                            };
                            wSocket.onclose = function(){
                                // websocket is closed.
                                console.log("Connection is closed...");
                            };
                        }
                        else{
                            // Thebrowser doesn't support WebSocket
                            alert("WebSocket is NOT supported by your Browser!");
                        }
                    }
                    
                    function websocketOpen(){
                        initializeReception();
                    }
                    
                    function websocketClose(){
                        wSocket.close();
                    }
                    /*
                    function makeSeatOk(seatId){
                        console.log('makeSeatOk');
                        var computedSeatId = 'seat_' + seatId;
                        var componentId = onWaitSeats[computedSeatId];
                        console.log('componentId ' + componentId);
                        delete onWaitSeats[computedSeatId];
                        okSeats[testSeatId] = componentId;
                        console.log('okSeats ' + JSON.stringify(okSeats));
                        
                        var elem = document.getElementById(componentId);
                        
                        if (typeof elem.onclick == "function") {
                            console.log('makeSeatOk CLICK!');
                            elem.onclick.apply(elem);
                        }
                        
                        elem = tableCache.querySelector('td[data-ticket-id=' + testSeatId + ']');
                        elem.className = elem.className.replace( /(?:^|\s)loading-back(?!\S)/g , '' );
                        
                    }
                
                    function sendMessage(seatId,status,componentId){
                        
                        console.log('pozvan send message');
                        var compSeatId = 'seat_' + seatId;
                        console.log('compSeatId: ' + compSeatId);
                        
                        if (!okSeats[compSeatId]){
                            console.log('not ok');
                            onWaitSeats[compSeatId] = componentId;
                            testSeatId = compSeatId;
                            console.log('ret false!');
                            console.log('onWaitSeats: ' + JSON.stringify(onWaitSeats));
                            
                            var elem = tableCache.querySelector('td[data-ticket-id=' + compSeatId + ']');
                            elem.className += ' loading-back';
                            console.log('saljem: ' + JSON.stringify({
                                'status': status,
                                'seatId': seatId,
                                'perfId': #{buyTicket.perfId}
                                }));
                            wSocket.send(JSON.stringify({
                                'status': status,
                                'seatId': seatId,
                                'perfId': #{buyTicket.perfId}
                                }));
                            
                            return false;
                        }else{
                            delete okSeats[compSeatId];
                            console.log('seat ok ok');
                            
                            return true;
                        }
                        
                        
                    }
                    */
                       
                    function makeSeatReserved(seatId){
                        var elem = document.getElementById('seat_'+seatId);
                        elem.setAttribute('data-status-code','#{buyTicket.statusCodeReserved}');
                        
                        elem.className = 'ticket-reserved';
                        elem.title='red ' + elem.getAttribute('data-row') + ', kol: ' + elem.getAttribute('data-col') + ', status: Rezervisana'; 
                    }
                    
                    function makeSeatOk(seatId){
                        console.log('makeSeatOk');
                        var computedSeatId = 'seat_' + seatId;
                        var elem = onWaitSeats[computedSeatId];
                        
                        delete onWaitSeats[computedSeatId];
                        okSeats[computedSeatId] = elem;
                        
                        console.log('okSeats ' + JSON.stringify(okSeats));
                        
                        elem.setAttribute('data-status-code','#{buyTicket.statusCodeInStore}');
                        
                        elem.className = 'ticket-in-store';
                        elem.title='red ' + elem.getAttribute('data-row') + ', kol: ' + elem.getAttribute('data-col') + ', status: Izabrana'; 
                        
                    }
                    
                    function handleSeatClick(elemSeatId){
                        console.log('pozvan send message');
                        
                        console.log('compSeatId: ' + elemSeatId);
                        var seat = document.getElementById(elemSeatId);
                        if (!okSeats[elemSeatId]){
                            
                            onWaitSeats[elemSeatId] = seat;
                            
                            console.log('onWaitSeats: ' + JSON.stringify(onWaitSeats));

                            seat.className += ' loading-back';
                            console.log('stat code: '+seat.getAttribute('data-status-code'));
                            console.log('data-seat-id:  '+seat.getAttribute('data-seat-id'));
                            console.log('saljem: ' + JSON.stringify({
                                'status': seat.getAttribute('data-status-code'),
                                'seatId': seat.getAttribute('data-seat-id'),
                                'perfId': #{buyTicket.perfId}
                                }));
                            wSocket.send(JSON.stringify({
                                'status': seat.getAttribute('data-status-code'),
                                'seatId': seat.getAttribute('data-seat-id'),
                                'perfId': #{buyTicket.perfId}
                                }));
                            
                            return false;
                        }else{
                            delete okSeats[elemSeatId];
                            console.log('seat ok ok');
                            
                            return true;
                        }
                    }
    
                    function dataTicketClick(e){
                        handleSeatClick(this.id);
                    }
                    
                    
                    
                    window.onload = function(){
                        tableCache = document.getElementById("seats-table");
                        websocketOpen();
                        var elems = tableCache.querySelectorAll('td[data-ticket="true"]');
                        
                        for(var i=0; i<elems.length; i++ ){
                            console.log('elem: ' + elems[i].title);
                            elems[i].addEventListener('click', dataTicketClick,false);
                        }
                        
                        
                        
                        
                        /*
                        var els = document.querySelectorAll('td[data-ticket]');
                    for (var i=0; i<els.length; i++){
                        var elem = els[i];
                        console.log(elem.getAttribute('data-status'));
                        elem.addEventListener("click", function(e){alert('status: ' + this.getAttribute('data-status') + ';<br /> title: ' + this.getAttribute('title'))}, false);
                        */
                    };
                    
                    
                    
                    function startTest(){
                            setInterval(randomClick, 2000);
                        }

                        function randomClick(){
                            
                            handleSeatClick(getRandomSeatId(0,300));
//                            handleSeatClick(getRandomSeatId(301,396));
                        }
                    
                    /*function your_function(){
                        alert('loaded');
                    }
                    if (window.attachEvent) {window.attachEvent('onload', your_function);}
                    else if (window.addEventListener) {window.addEventListener('load', your_function, false);}
                    else {document.addEventListener('load', your_function, false);}*/
    
    
                     /* ]]> */
                </script>
            </ui:define>
        </ui:composition>