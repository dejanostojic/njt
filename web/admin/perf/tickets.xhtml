        <ui:composition xmlns="http://www.w3.org/1999/xhtml"
                        xmlns:h="http://xmlns.jcp.org/jsf/html"
                        xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                        xmlns:p="http://primefaces.org/ui"
                        xmlns:f="http://xmlns.jcp.org/jsf/core"
                        xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
                        xmlns:util="http://dostojic.com/util/functions"
                        xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
                        template="/WEB-INF/templates/admin.xhtml">
            
            
            <ui:define name="title">Karte - #{buyTicket.perf.play.title}</ui:define>
            <ui:define name="stripe1">
                <div>Filter</div>
            </ui:define>
            <ui:define name="content">
                <h:panelGroup layout="block" rendered="#{not empty buyTicket.perf}">
                <h1>Karte - #{buyTicket.perf.play.title}</h1>
                <p>
                    Na ovoj stranici mozete da birate karte za određeno izvođenje. U ovom slučaju za izvođenje predstave #{buyTicket.perf.play.title} u sali: #{buyTicket.perf.stage.name}. <br/>
                    <a href="#test" data-role="newtab" target="_blank" title="Simulira se nasumičan klik na slobodno ili izabrano sedište svakog sekunde.">Kliknite ovde da pokrenete test u novom tabu. (na url se samo doda '#test')</a><br/>
                     ili <a href="#fill" data-role="newtab" target="_blank" title="Simulira se nasumičan klik na slobodno sedište svakog sekunda. ">Kliknite ovde da pokrenete test u novom tabu. (na url se samo doda '#fill')</a><br />
                    
                    Ukoliko korinik ne izabere neku kartu u roku od 5 minuta biće 'otkačen' sa servera (i obavešten o tome). 
                    Mogu se u realnom vremenu u više tabova birati karte, a promene će se slati svim klijenitma koji prate isto izvođenje.
                </p>
                <h3>Tehnologije:</h3>
                <ul>
                    <li>Implementirano pomoću WebSocket protokola.</li>
                    <li>Aplikativni server Apache Tomcat 7.0.53 (probao sam i sa Apache Tomcat 8.0.12 ali je mnogo lošije radilo)</li>
                    <li>Java 8</li>
                    <li>Java Server Faces 2.2.4 MVC framework sa Facelets (.xhtml) rendering tehnologijom (korišćena <a href="http://ocpsoft.org/rewrite/" target="_blank">Ocpsoft rewrite</a> ekstenzija za sakrivanje ekstenzije '.xhtml' i ulepšavanje URL-a)</li>
                </ul>
                    
                
                <h3 id="startTest" onclick="startTest('#test')">Start test</h3>
                <h3 id="stopTest" onclick="stopInterval()" class="hide">Stop test</h3>
                
                <h3 id="webSocketStart" onclick="return websocketOpen()">Start websocket</h3>
                <h3 id="webSocketStop" onclick="return websocketClose()" class="hide">Stop websocket</h3>
                

                <h:form id="ticketsTableForm">
                    <p:growl id="growl" showDetail="false" sticky="false" />  
                        
                    <h:panelGroup id="ticTable" layout="block">
                        <p:inputText id="ownerName" value="#{buyTicket.ownerName}"/>
                        <h:inputHidden id="sessionInput" value="#{buyTicket.sessionId}"  />
                        <p:commandButton actionListener="#{buyTicket.saveTickets}" onsuccess="sellAllSeats" value="Kupi karte" ajax="true" process="sessionInput ownerName" update="orderList"/>
                        
                        <table id="seats-table">
                           <tr>
                               <th></th>
                               <ui:repeat value="#{util:createArray(buyTicket.perf.stage.numberOfColumns)}" var="a" varStatus="stat">
                                   <th>k #{stat.index + 1}.</th>
                               </ui:repeat>

                           </tr>

                            <ui:repeat value="#{buyTicket.tickets}" id="repeatTickets" var="ticket" varStatus="status">

                               <h:outputText  value="&lt;tr&gt;&lt;th&gt;r #{ticket.seat.row}.&lt;/th&gt;" escape="false" rendered="#{status.index % buyTicket.perf.stage.numberOfColumns == 0}"/>
                               
                               <td id="seat_#{ticket.seatId}" data-ticket="true" data-seat-id="#{ticket.seatId}" data-status-code="#{ticket.status}" data-col="#{ticket.seat.column}" data-row="#{ticket.seat.row}"
                                   title="red #{ticket.seat.row}, kol: #{ticket.seat.column}, status: #{ticket.statusText}" 
                                   class="text-center #{ticket.free ? 'ticket-free' : ticket.sold ? 'ticket-sold' : ticket.reserved ? 'ticket-reserved' : 'ticket-in-store'}">
                               </td>
                               
                               <h:outputText value="&lt;/tr&gt;" escape="false" rendered="#{(status.index + 1) % buyTicket.perf.stage.numberOfColumns == 0}"/>


                           </ui:repeat>

                       </table>
                            
                        <h:panelGroup id="orderList" layout="block" >
                            <h:panelGroup layout="block" rendered="#{not empty buyTicket.selectedTickets and fn:length(buyTicket.selectedTickets) > 0}">
                                <ul>
                                <ui:repeat value="#{buyTicket.selectedTickets}" var="ticket">
                                    <li>red: #{ticket.seat.row}, kol: #{ticket.seat.column} - <p:commandLink value="izbaci" action="#{buyTicket.removeFromStock(ticket)}" update=":ticketsTableForm:growl :ticketsTableForm:ticTable" /></li>
                                </ui:repeat>
                                </ul>
                            </h:panelGroup>
                            <h:panelGroup layout="block" rendered="#{empty buyTicket.selectedTickets or fn:length(buyTicket.selectedTickets) == 0}">
                                <h3>Izaberite sedište</h3>
                            </h:panelGroup>
                        </h:panelGroup>
                    </h:panelGroup>
                    
                </h:form>
                </h:panelGroup>
            </ui:define>
            <ui:define name="js">
                <h:outputScript target="body" >
                    
                </h:outputScript>
                <script type="text/javascript">
                    /* <![CDATA[ */
                    
                    var wSocket,
                        onWaitSeats = {},
                        tableCache,
                        intervalID;
                        
                    function stopInterval(){
                        document.getElementById('stopTest').className = 'hide';
                        document.getElementById('startTest').className = '';
                        if (intervalID){
                            clearInterval(intervalID);
                        }
                    }
                    
                    function getRandomSeatId(min, max) {
                        var id = 'seat_' + getRandomNumb(min,max);
                        console.log(id);
                        return id;
                    }
                    
                    function getRandomNumb(min, max) {
                        return (Math.floor(Math.random() * (1 + max - min)) + min);
                    }

                    function initializeReception(){
                        var host = "ws://#{request.serverName}:#{request.serverPort == 80 ? '8000' : request.serverPort}/dost/tickets/#{buyTicket.perfId}";
                        wSocket = new WebSocket(host);
                        var browserSupport = ("WebSocket" in window) ? true : false;
                        if (browserSupport){
                            wSocket.onopen = function(){
                                console.log(" Web Socket is connected.");
                            };
                            wSocket.onmessage = function(event){
                                var received_msg = event.data;
                                console.log("PRIMLJENA PORUKA: "+ received_msg);
                                var msg = JSON.parse(received_msg);
                                if (msg.addedStatus == '#{buyTicket.msgStInserted}'){
                                    makeSeatOk(msg.seatId);
                                } else if (msg.addedStatus == '#{buyTicket.msgStAllreadyThere}'){
                                    makeSeatReserved(msg.seatId);
                                    console.log('NIJE USPELO DODAVANJE!');
                                } else if (msg.addedStatus == '#{buyTicket.msgStNew}'){
                                    makeSeatReserved(msg.seatId);
                                    console.log('NEKO DRUGI JE DODAO!');
                                } else if (msg.addedStatus == '#{buyTicket.msgStFreed}'){
                                    freeSeet(msg.seatId);
                                    console.log('Oslobodjeno!');
                                } else if (msg.addedStatus == '#{buyTicket.msgStOnOpen}' || msg.addedStatus == '#{buyTicket.msgStOnClose}' || msg.addedStatus == '#{buyTicket.msgStBought}'){
                                    setInitState(msg);
                                }
                            };
                            wSocket.onclose = function(event){
                                // websocket is closed.
                                console.log("Connection is closed...");
                                console.log("wasClean: " + event.wasClean);
                                console.log("code: " + event.code);
                                console.log("reason:" + event.reason);
                                if (event.code == 1001){
                                    alert('Konekcija sa serverom izgubljena. Osvežite stranicu!')
                                }
                                
                            };
                            wSocket.onerror = function(error) {
                                console.log('WebSocket Error: ' + error);
                            };
                            window.addEventListener ("onbeforeunload", websocketClose, false);
                            window.addEventListener ("onunload", websocketClose, false);
                        }
                        else{
                            // Thebrowser doesn't support WebSocket
                            alert("WebSocket is NOT supported by your Browser!");
                        }
                    }
                    
                    function websocketOpen(){
                        document.getElementById('webSocketStart').className = 'hide';
                        document.getElementById('webSocketStop').className = '';
                        initializeReception();
                    }
                    
                    function websocketClose(){
                        try{
                            document.getElementById('webSocketStart').className = '';
                            document.getElementById('webSocketStop').className = 'hide';
                            wSocket.close();
                        }catch(e){
                            console.log(e);
                        }
                    }
                    
                    function setInitState(msg){
                        var seatList = msg.list,
                            onBought = msg.addedStatus === '#{buyTicket.msgStBought}',
                            onOpen = msg.addedStatus === '#{buyTicket.msgStOnOpen}',
                            onClose = msg.addedStatus === '#{buyTicket.msgStOnClose}';
                        
                        if (onOpen){
                            document.getElementById('ticketsTableForm:sessionInput').value = msg.sessionId;
                        }
                        if (seatList){
                            for (var i=0; i<seatList.length; i++){
                                var seatId = seatList[i];
                                if (seatId > 0){
                                    try{
                                        var elem = document.getElementById('seat_'+seatId);
                                        if (onOpen){
                                            styleSeetReserved(elem);
                                        }else if (onClose){
                                            styleSeetFree(elem);
                                        }else if (onBought){
                                            styleSeetSold(elem);
                                        }
                                    }catch(e){
                                        console.log(e);
                                    }
                                }
                            }
                        }
                    }
                    
                    
                    function styleSeetReserved(seat){
                        seat.setAttribute('data-status-code','#{buyTicket.statusCodeReserved}');
                        seat.className = 'ticket-reserved';
                        seat.title='red ' + seat.getAttribute('data-row') + ', kol: ' + seat.getAttribute('data-col') + ', status: Rezervisana'; 
                    }
                    
                    function styleSeetFree(seat){
                        seat.setAttribute('data-status-code','#{buyTicket.statusCodeFree}');
                        seat.className = 'ticket-free';
                        seat.title='red ' + seat.getAttribute('data-row') + ', kol: ' + seat.getAttribute('data-col') + ', status: Slobodna'; 
                    }
                    
                    
                    function freeSeet(seatId){
                        styleSeetFree( document.getElementById('seat_'+seatId) );
                        
                    }
                    
                    function styleSeetSold(seat){
                        seat.setAttribute('data-status-code','#{buyTicket.statusCodeSold}');
                        seat.className = 'ticket-sold';
                        seat.title='red ' + elem.getAttribute('data-row') + ', kol: ' + elem.getAttribute('data-col') + ', status: Prodana'; 
                    }
                    
                    function sellAllSeats(){
                        console.log('sell all seats');
                        var seats = tableCache.querySelectorAll(tableCache.querySelectorAll('td[data-status-code="#{buyTicket.statusCodeInStore}"]'));
                        for (var i=0; i<seats.length; i++){
                            styleSeetSold(seats[i]);
                        }
                        
                    }

                    function makeSeatReserved(seatId){
                        var elem = document.getElementById('seat_'+seatId);
                        elem.setAttribute('data-status-code','#{buyTicket.statusCodeReserved}');
                        
                        elem.className = 'ticket-reserved';
                        elem.title='red ' + elem.getAttribute('data-row') + ', kol: ' + elem.getAttribute('data-col') + ', status: Rezervisana'; 
                    }
                    
                    function makeSeatOk(seatId){
                        console.log('makeSeatOk');
                        var computedSeatId = 'seat_' + seatId;
                        var elem = onWaitSeats[computedSeatId];
                        
                        delete onWaitSeats[computedSeatId];
                        
                        elem.setAttribute('data-status-code','#{buyTicket.statusCodeInStore}');
                        
                        elem.className = 'ticket-in-store';
                        elem.title='red ' + elem.getAttribute('data-row') + ', kol: ' + elem.getAttribute('data-col') + ', status: Izabrana'; 
                        
                    }

                    function handleSeatClick(seat){
                        var statusCode = seat.getAttribute('data-status-code');
                        if ((statusCode === '#{buyTicket.statusCodeFree}' || statusCode === '#{buyTicket.statusCodeInStore}') && wSocket && wSocket.readyState === WebSocket.OPEN){
                            
                            console.log('pozvan send message');
                            console.log('compSeatId: ' + seat.id);

                            onWaitSeats[seat.id] = seat;

                            seat.className += ' loading-back';
                           /* console.log('saljem: ' + JSON.stringify({
                                'status': seat.getAttribute('data-status-code'),
                                'seatId': seat.getAttribute('data-seat-id'),
                                'perfId': #{buyTicket.perfId}
                                }));
                            */
                            wSocket.send(JSON.stringify({
                                'status': seat.getAttribute('data-status-code'),
                                'seatId': seat.getAttribute('data-seat-id'),
                                'perfId': #{buyTicket.perfId}
                            }));
                            
                        }
                    }
                    
                    function dataTicketClick(e){
                            handleSeatClick(this);
                    }
                    
                    function buyTicketsInform(){
                        wSocket.send(JSON.stringify({'perfId': #{buyTicket.perfId}, 'status':'#{buyTicket.statusCodeSold}'}));
                    }
                    
                    $(document).ready(function(){
                        
                            tableCache = document.getElementById("seats-table");
                            websocketOpen();
                            var seats = tableCache.querySelectorAll('td[data-ticket="true"]');
                            console.log('seats size: ' + seats.length);

                            for(var i=0; i<seats.length; i++ ){
                                seats[i].addEventListener('click', dataTicketClick,false);
                            }

                            if (document.location.hash === '#test' || document.location.hash === '#fill'){
                                startTest(document.location.hash);
                            }
                        
                    });
                    
                    function startTest(testKind){
                        document.getElementById('stopTest').className = '';
                        document.getElementById('startTest').className = 'hide';
                        
                        intervalID = setInterval(randomClick, 1000, testKind);
                        
                    }

                    function randomClick(testKind){
                        var seats;
                        if ('#test' === testKind){
                            seats = tableCache.querySelectorAll('td[data-status-code="#{buyTicket.statusCodeFree}"],td[data-status-code="#{buyTicket.statusCodeInStore}"]');
                        }else if ('#fill' === testKind){
                            seats = tableCache.querySelectorAll('td[data-status-code="#{buyTicket.statusCodeFree}"]');
                        }
                        
                        var length = seats.length;
                        if (length > 0){
                            var rand = getRandomNumb(0, length -1);
                            handleSeatClick(seats[rand]);
                        }
                    }
                     /* ]]> */
                </script>
            </ui:define>
        </ui:composition>